Barcha mavjud ma'lumotlar bazalarini ko'rish uchun terminal turida 
show dbs
--------------------------------------------------------------------------------------------------------------------
Ma'lumotlar bazasi nomini yozib o'zgartirishingiz yoki yangi ma'lumotlar bazasini yaratishingiz mumkin .
use

--------------------------------------------------------------------------------------------------------------------
To'plamni yaratishning 2 usuli mavjud.

1-usul
Siz ma'lumotlar bazasi usuli yordamida to'plam yaratishingiz mumkin createCollection().

2-usul
Jarayon davomida siz kollektsiya yaratishingiz mumkin insert.

Misol
Biz bu erda objectpost ma'lumotlarini o'z ichiga olgan haqiqiy JavaScript ob'ekti deb taxmin qilamiz:

--------------------------------------------------------------------------------------------------------------------
Hujjatlarni kiritish
MongoDB ma'lumotlar bazasiga hujjatlarni kiritishning 2 usuli mavjud.

insertOne()
Bitta hujjatni kiritish uchun insertOne()usuldan foydalaning.

insertMany()
Bir vaqtning o'zida bir nechta hujjatlarni kiritish uchun insertMany()usuldan foydalaning.

--------------------------------------------------------------------------------------------------------------------
Ma'lumotlarni toping
MongoDB to'plamidan ma'lumotlarni topish va tanlashning ikkita usuli mavjud find() va findOne().
db.posts.find()
db.posts.findOne()

--------------------------------------------------------------------------------------------------------------------
Ma'lumotlarni so'rash
Ma'lumotlarni so'rash yoki filtrlash uchun biz so'rovni o'z find() yoki findOne()usullarimizga kiritishimiz mumkin.
db.posts.find( {category: "News"} )

Ushbu misol natijalarda faqat title va maydonlarini ko'rsatadi .date
db.posts.find({}, {title: 1, date: 1})

--------------------------------------------------------------------------------------------------------------------
Hujjatni yangilash
Mavjud hujjatni yangilash uchun biz updateOne()yoki updateMany()usullaridan foydalanishimiz mumkin.
db.posts.updateOne( { title: "Post Title 1" }, { $set: { likes: 2 } } ) 

Agar topilmasa, kiriting
Agar hujjat topilmasa, uni kiritmoqchi bo'lsangiz, variantdan foydalanishingiz mumkin upsert.

Misol
Barcha hujjatlarni 1 ga yangilash likes. Buning uchun biz (ko'paytirish) operatoridan foydalanamiz $inc:

db.posts.updateMany({}, { $inc: { likes: 1 } })

--------------------------------------------------------------------------------------------------------------------
Hujjatlarni o'chirish
deleteOne() yoki usullaridan foydalanib hujjatlarni o'chirib tashlashimiz mumkin deleteMany().

deleteOne()
Usul deleteOne()taqdim etilgan so'rovga mos keladigan birinchi hujjatni o'chiradi

db.posts.deleteOne({ title: "Post Title 5" })

deleteMany()
Usul deleteMany()taqdim etilgan so'rovga mos keladigan barcha hujjatlarni o'chirib tashlaydi.

--------------------------------------------------------------------------------------------------------------------
MongoDB so'rov operatorlari
Hujjat maydonlarini solishtirish va ularga murojaat qilish uchun ishlatilishi mumkin bo'lgan ko'plab so'rov operatorlari mavjud.

Taqqoslash
Qiymatlarni solishtirish uchun so'rovlarda quyidagi operatorlardan foydalanish mumkin:

$eq: Qiymatlar teng
$ne: Qiymatlar teng emas
$gt: Qiymat boshqa qiymatdan katta
$gte: Qiymat boshqa qiymatdan katta yoki unga teng
$lt: Qiymat boshqa qiymatdan kichik
$lte: Qiymat boshqa qiymatdan kichik yoki unga teng
$in: Qiymat massiv ichida mos keladi
Mantiqiy
Quyidagi operatorlar bir nechta so'rovlarni mantiqiy taqqoslashlari mumkin.

$and: Ikkala so'rov mos keladigan hujjatlarni qaytaradi
$or: Har bir soʻrov mos keladigan hujjatlarni qaytaradi
$nor: Ikkala so'rov mos kelmasa, hujjatlarni qaytaradi
$not: So'rov mos kelmagan hujjatlarni qaytaradi
Baholash
Quyidagi operatorlar hujjatlarni baholashda yordam beradi.

$regex: Maydon qiymatlarini baholashda muntazam ifodalardan foydalanishga ruxsat beradi
$text: Matn qidiruvini amalga oshiradi
$where: Hujjatlarni moslashtirish uchun JavaScript ifodasidan foydalanadi

           Misol uchun
({title: 'Post Title 4'}, {Misol uchun shu yerga shart beriladi ($set:{likes: 10})})

--------------------------------------------------------------------------------------------------------------------
MongoDB yangilash operatorlari
Hujjatlarni yangilash paytida foydalanish mumkin bo'lgan ko'plab yangilash operatorlari mavjud.

Maydonlar
Maydonlarni yangilash uchun quyidagi operatorlardan foydalanish mumkin:

$currentDate: Maydon qiymatini joriy sanaga o'rnatadi
$inc: Maydon qiymatini oshiradi
$rename: Maydon nomini o'zgartiradi
$set: Maydon qiymatini o'rnatadi
$unset: Hujjatdan maydonni olib tashlaydi
Massiv
Quyidagi operatorlar massivlarni yangilashda yordam beradi.

$addToSet: Massivga alohida elementlar qo'shadi
$pop: Massivning birinchi yoki oxirgi elementini olib tashlaydi
$pull: So'rovga mos keladigan massivdan barcha elementlarni olib tashlaydi
$push: Massivga element qo‘shadi


--------------------------------------------------------------------------------------------------------------------

db.posts.aggregate([
  // 1-bosqich: Faqat 1 dan ortiq yoqtirgan hujjatlarni toping
  {
    $match: { likes: { $gt: 1 } }
  },
  // 2-bosqich: Hujjatlarni toifalar bo‘yicha guruhlang va har bir toifaga yoqqanini jamlang
  {
    $group: { _id: "$category", totalLikes: { $sum: "$likes" } }
  }
])


--------------------------------------------------------------------------------------------------------------------
Birlashtirish $group
Ushbu yig'ish bosqichi hujjatlarni taqdim etilgan yagona _idifoda bo'yicha guruhlaydi.

db.(jadval nomi).aggregate(
    [ { $group : { _id : "$(Qayerdan olishi)" } } ]
)


--------------------------------------------------------------------------------------------------------------------
Birlashtirish $limit
Ushbu yig'ish bosqichi keyingi bosqichga o'tgan hujjatlar sonini cheklaydi.



--------------------------------------------------------------------------------------------------------------------
Birlashtirish $project
Ushbu yig'ish bosqichi faqat belgilangan maydonlarni keyingi yig'ish bosqichiga o'tkazadi.

db.restaurants.aggregate([
  {
    $project: {
      "name": 1,
      "cuisine": 1,
      "address": 1
    }
  },
  {
    $limit: 5
  }
])


--------------------------------------------------------------------------------------------------------------------
Birlashtirish $sort
Ushbu yig'ish bosqichi guruhlari barcha hujjatlarni belgilangan tartiblash tartibida saralaydi.

db.(Bu yerga jadval nomi).aggregate([ 
  { 
    $sort: { "accommodates": -1 } 
  },
  {
    $project: {
      "name": 1,
      "accommodates": 1
    }
  },
  {
    $limit: 5
  }
])

--------------------------------------------------------------------------------------------------------------------
Birlashtirish $match
Ushbu yig'ish bosqichi topilma kabi harakat qiladi. U taqdim etilgan so'rovga mos keladigan hujjatlarni filtrlaydi.

db.listingsAndReviews.aggregate([ 
  { $match : { property_type : "House" } },
  { $limit: 2 },
  { $project: {
    "name": 1,
    "bedrooms": 1,
    "price": 1
  }}
])


--------------------------------------------------------------------------------------------------------------------
Birlashtirish $addFields
Ushbu yig'ish bosqichi hujjatlarga yangi maydonlarni qo'shadi.

db.restaurants.aggregate([
  {
    $addFields: {
      avgGrade: { $avg: "$grades.score" }
    }
  },
  {
    $project: {
      "name": 1,
      "avgGrade": 1
    }
  },
  {
    $limit: 5
  }
])



--------------------------------------------------------------------------------------------------------------------
Birlashtirish $count
Ushbu umumlashtirish bosqichi oldingi bosqichdan o'tgan hujjatlarning umumiy miqdorini hisoblaydi.

db.restaurants.aggregate([
  {
    $match: { "cuisine": "Chinese" }
  },
  {
    $count: "totalChinese"
  }
])

--------------------------------------------------------------------------------------------------------------------
Birlashtirish $lookup
Ushbu yig'ish bosqichi bir xil ma'lumotlar bazasidagi to'plamga chap tashqi ulanishni amalga oshiradi.

To'rtta majburiy maydon mavjud:

from: Bir xil ma'lumotlar bazasida qidirish uchun foydalaniladigan to'plam
localField: Toʻplamda noyob identifikator sifatida ishlatilishi mumkin boʻlgan asosiy toʻplamdagi maydon from.
foreignFieldfrom: Birlamchi toʻplamda noyob identifikator sifatida ishlatilishi mumkin boʻlgan toʻplamdagi maydon .
as: To'plamdagi mos hujjatlarni o'z ichiga olgan yangi maydon nomi from.

db.comments.aggregate([
  {
    $lookup: {
      from: "movies",
      localField: "movie_id",
      foreignField: "_id",
      as: "movie_details",
    },
  },
  {
    $limit: 1
  }
])

--------------------------------------------------------------------------------------------------------------------
Birlashtirish $out
Ushbu yig'ish bosqichi qaytarilgan hujjatlarni yig'ish quvuridan to'plamga yozadi.

db.listingsAndReviews.aggregate([
  {
    $group: {
      _id: "$property_type",
      properties: {
        $push: {
          name: "$name",
          accommodates: "$accommodates",
          price: "$price",
        },
      },
    },
  },
  { $out: "properties_by_type" },
])

--------------------------------------------------------------------------------------------------------------------
Atlas asboblar panelida Klaster nomini , so'ng Qidiruv yorlig'ini bosing.
Qidiruv indeksini yaratish tugmasini bosing .
Vizual muharriridan foydalaning va Keyingiga bosing.
Indeksingizni nomlang, indekslanmoqchi bo'lgan ma'lumotlar bazasi va to'plamni tanlang va "Keyingi" tugmasini bosing.
Agar siz indeksingizni "standart" deb nomlasangiz, quvur liniyasi bosqichida indeks nomini ko'rsatishingiz shart emas $search.
sample_mflixMa'lumotlar bazasi va to'plamni tanlang movies.
Qidiruv indeksini yaratish- ni bosing va indeks tugashini kuting.
So'rovni bajarish
Qidiruv indeksimizdan foydalanish uchun biz $searchyig'ish quvur liniyasidagi operatordan foydalanamiz.

Misol
db.movies.aggregate([
  {
    $search: {
      index: "default", // optional unless you named your index something other than "default"
      text: {
        query: "star wars",
        path: "title"
      },
    },
  },
  {
    $project: {
      title: 1,
      year: 1,
    }
  }
])



